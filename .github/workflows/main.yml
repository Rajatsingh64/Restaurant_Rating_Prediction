name: CI/CD for Airflow and Streamlit App to AWS ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  # Continuous Integration: Testing, Building, and Pushing Docker Image to AWS ECR
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from GitHub repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Install dependencies and utilities like jq, unzip, etc.
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      # Step 4: Configure AWS credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build, tag, and push the Docker image to ECR
      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build \
            --build-arg AIRFLOW_EMAIL=${{ secrets.AIRFLOW_EMAIL }} \
            --build-arg AIRFLOW_USERNAME=${{ secrets.AIRFLOW_USERNAME }} \
            --build-arg AIRFLOW_PASSWORD=${{ secrets.AIRFLOW_PASSWORD }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  # Continuous Deployment: Pull image from ECR and Deploy Airflow and Streamlit containers
  cd:
    name: Continuous Deployment
    needs: ci
    runs-on: self-hosted # Ensure your self-hosted runner has Docker and Docker Compose
    steps:
      # Step 2: Configure AWS credentials for deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Install utilities if not already installed (for self-hosted runner)
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      # Step 4: Login to Amazon ECR to pull the Docker image
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
      # Step 5: Pull the Docker image from ECR
      - name: Pull Docker image
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # Step 6: Set environment variables for both Airflow and Streamlit app and run them via Docker Compose
      - name: Set Airflow and Streamlit Secrets and Run Docker Containers
        run: |
          export IMAGE_NAME="${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"
          export BUCKET_NAME="${{ secrets.BUCKET_NAME }}"
          export MONGO_DB_URL="${{ secrets.MONGO_DB_URL }}"
          export AIRFLOW_EMAIL="${{ secrets.AIRFLOW_EMAIL }}"
          export AIRFLOW_USERNAME="${{ secrets.AIRFLOW_USERNAME }}"
          export AIRFLOW_PASSWORD="${{ secrets.AIRFLOW_PASSWORD }}"
          export STREAMLIT_APP_PORT="${{ secrets.STREAMLIT_APP_PORT }}"  # Streamlit-specific
          
          # Run Docker Compose to start both Airflow and Streamlit services
          docker compose up -d 

      # Step 7: Clean up old Docker images to free space
      - name: Docker System Prune to Remove Old Images
        run: |
          docker system prune -f
